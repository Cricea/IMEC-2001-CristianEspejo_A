def reload_props():
    this.PropertyProvider = None
    
    # comment the following return to allow the rest of the function definition to be executed and add properties
    return
    
    """
    Some sample code is provided below that shows how to:
        1. Create an instance of the Provider. The Provider class is used to add custom properties to the details.
        2. Use the Provider instance to add custom properties.
        3. Configure those custom properties.
    """
    
    # Create the property instance
    provider = Provider()
    
    # Create a group named Group 1.
    group = provider.AddGroup("Group 1")
    
    # Create a property with control type Expression and a property with control type Double, and add it to the Group 1
    double_prop = group.AddProperty("Double Property 1", Control.Double)
    expression_prop = group.AddProperty("Expression Property 1", Control.Expression) # Expression is a string
    
    # Configure the double property to be parameterizable. As a default the property will be an input parameter.
    # However, by updating the ParameterType property, it can be configured to be a output parameter as well.
    # double_prop.CanParameterize = True
    # double_prop.ParameterType = ParameterType.Output
    
    # The valid range set here is used by the IsValid handler in the Provider class, please look at the class definition above.
    # If interested in the implementation, please look at the class definition below
    double_prop.ValidRange = (1.0, 4.0)
    
    # Create a new group named Group 2.
    group_two = provider.AddGroup("Group 2")
    
    # Add a scoping property to the second group created above
    scoping_prop = group_two.AddProperty("Scoping Property", "Scoping", "property_templates")
    
    # Add an options property to the second group
    options_prop = group_two.AddProperty("Options Property", Control.Options)
    
    # Add a couple options to the options property.
    options_prop.Options = {1 : "Value 1", 2 : "Value 2"}
    
    # Connects the provider instance back to the object by setting the PropertyProvider member on this, 'this' being the 
    # current instance of the Python Code object.
    this.PropertyProvider = provider


# region Property Provider Template
from Ansys.ACT.Mechanical.AdditionalProperties import PropertyProviderAdapter
from Ansys.ACT.Mechanical.AdditionalProperties import *

"""
The property_templates module is located in %awp_root212%\aisol\DesignSpace\DSPages\Python\mech_templates
"""
from mech_templates import property_templates

property_templates.set_ext_api(ExtAPI)

class Provider(Ansys.ACT.Interfaces.Mechanical.IPropertyProvider):
    """
    Provider template that implements IPropertyProvider to demonstrate the usage of IPropertyProvider.
    It provides helper methods and classes that manage properties that can be dynamically added to an object.
    """
    
    # region These are callbacks that as a user you may want to modify to get specific behavior
    def IsValid(self, prop):
        """
        Called when checking the validity of a property, with the property instance.
        """

        # for double property use the ValidRange property to check validity
        if(isinstance(prop, DoubleProperty)):
            return prop.ValidRange[0] <= prop.Value and prop.ValidRange[1] >= prop.Value
        
        return True
    
    def IsReadOnly(self, prop):
        """
        Called when checking if a property should be readonly, with the property instance.
        """

        return False
    
    def IsVisible(self, prop):
        """
        Called when checking if a property should be visible, with the property instance.
        """

        return True
    
    def SetValue(self, prop, val):
        """
        Allows you to override the setter of the Value property on the property instance. 
        Keyword Arguments:
            prop -- property of which the value is being set
            val -- the value that was set
        Returns:
            The value that the Value property should be set to
        """
        return val

    def GetValue(self, prop, val):
        """
        Allows you to override the getter of the Value property on the property instance. 
        Keyword Arguments:
            prop -- property of which the value is being set
            val -- current value of the Value property
        Returns:
            The value that the getter on the internal value should return
        """
        return val
    # endregion   
    
    # structures that hold property instances
    prop_list = []
    prop_map = {}
    prop_groups = set()

    class __AnsGroup():
        """
        Helper group class to group properties, and provides methods to add properties to groups.
        """
        provider = None
        def __init__(self,name=None, provider=None):
            self.name = name
            self.provider = provider
        
        def __AddScopingProperty(self, name):
            """
            Adds a scoping property with a given name to this group.
            
            Keyword Arguments : 
                name -- unique name for the scoping property
            """
            scoping_prop = property_templates.ScopingProperty(name, self.name)
            
            for prop in scoping_prop.GetGroupedProps():
                self.provider.AddProperty(prop)
            return scoping_prop.GetGroupedProps()
        
        def AddProperty(self, name=None, prop_control=None, module_name=None):
            """
            Creates an instance of the property and connects delgates in 
            the associated Property Propvider.

            Keyword Arguments : 
                name -- unique name for the scoping property
                prop_control -- one of the built in controls, or extended controls
                module_name -- module where the control is defined
            """

            #special case for scoping property
            if(prop_control == "Scoping" and module_name == "property_templates"):
                return self.__AddScopingProperty(name)
            
            #if no module_name is passed, use the globals in current module
            #that has the built in controls imported
            prop_mod_globals = None
            if(module_name != None):
                if(module_name not in globals()):
                    raise Exception("Unknown module : " + module_name)
                
                prop_mod_globals = globals()[module_name].get_globals()
            else:
                prop_mod_globals = globals()
            
            #class name is built based on control + "Property"
            #    Double - > DoubleProperty
            prop_class_name = str(prop_control) + "Property"
            
            if(prop_class_name not in prop_mod_globals):
                raise Exception("Unknown property class : " + prop_class_name)
            
            #instantiate the property based on module and class name
            prop = prop_mod_globals[prop_class_name](self.name + "/" + name, self.name)
            
            if(prop == None):
                raise Exception("Issue while creating the property instance.")
            
            #set the delegates to property provider functions
            prop.IsValidCallback = self.provider.IsValid
            prop.IsReadOnlyCallback = self.provider.IsReadOnly
            prop.IsVisibleCallback = self.provider.IsVisible
            prop.GetValueCallback = self.provider.GetValue
            prop.SetValueCallback = self.provider.SetValue

            #as a default make the property name the property display name
            prop.DisplayName = name
            
            #add property to the provider
            self.provider.AddProperty(prop)
            
            return prop
        
    def __init__(self):
        pass

    def GetProperties(self):
        """
        Returns a list of properties in the order that they were added to the property provider. 
        """
        return [self.prop_map[propName] for propName in self.prop_list]
    
    def AddGroup(self, name=None):
        """
        Creates an instance of helper group class and returns it.
        """
        if name in self.prop_groups:
            raise Exception("Group with name " + name + " already exists, please use a unique group name.")
        
        #keep groups names so we can make sure no duplicate groups are added
        self.prop_groups.add(name)
        
        return self.__AnsGroup(name, self)
    
    def AddProperty(self, prop):
        """
        Method used by the helper group class to add the property to the data-structure holding
        the property instances.
        """
        if(prop.Name in self.prop_map):
            raise Exception("Property name must be unique, property with name '" + prop.Name + "' already exisits.")
        
        self.prop_list.append(prop.Name)
        self.prop_map[prop.Name] = prop
#end region



"""
Reload the properties at the end to make sure the class definition is executed before instantiation
"""
reload_props()

def post_started(sender, analysis):# Do not edit this line
    define_dpf_workflow(analysis)

# Uncomment this function to enable retrieving results from the table/chart
# def table_retrieve_result(value):# Do not edit this line
    # import mech_dpf
    # import Ans.DataProcessing as dpf
    # wf = dpf.Workflow(this.WorkflowId)
    # wf.Connect('contour_selector', value)
    # this.Evaluate()

def define_dpf_workflow(analysis):
    import mech_dpf
    import Ans.DataProcessing as dpf
    mech_dpf.setExtAPI(ExtAPI)
    dataSource = dpf.DataSources(analysis.ResultFileName)
    u = dpf.operators.result.displacement()
    nrm = dpf.operators.math.norm_fc()
    # timeScop = dpf.Scoping()
    # timeScop.Ids = [1]
    # u.inputs.time_scoping.Connect(timeScop)
    u.inputs.data_sources.Connect(dataSource)
    nrm.Connect(u)
    dpf_workflow = dpf.Workflow()
    dpf_workflow.Add(u)
    dpf_workflow.Add(nrm)
    # dpf_workflow.SetInputName(u, 0, 'time')
    # dpf_workflow.Connect('time', timeScop)
    dpf_workflow.SetOutputContour(nrm)
    dpf_workflow.Record('wf_id', False)
    this.WorkflowId = dpf_workflow.GetRecordedId()